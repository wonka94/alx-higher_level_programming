========================================
  Documentation of 7-base_geometry.py
========================================

Contains a `BaseGeometry` class with the following methods

`def area(self):`

which calculates the area of the `BaseGeometry`

`def integer_validator(self, name, value):`

validates the `value`

Test cases
==========

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Checking for module docstring:

>>> m = __import__("7-base_geometry").__doc__
>>> len(m) > 1
True

Checking for class docstring:

>>> c = __import__("7-base_geometry").BaseGeometry.__doc__
>>> len(c) > 1
True

Checking for method docstring:

>>> mod1 = __import__("7-base_geometry").BaseGeometry.area.__doc__
>>> len(mod1) > 1
True

>>> mod2 = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
>>> len(mod2) > 1
True
	 
>>> bg = BaseGeometry()

Case with a positive value

>>> bg.integer_validator("my_int", 12)
>>>

Case with a negative value

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
	  ...
ValueError: distance must be greater than 0

Case with a float

>>> bg.integer_validator("year", 8.5)
Traceback (most recent call last):
	  ...
TypeError: year must be an integer

Case with zero

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
	  ...
ValueError: age must be greater than 0

Case with a non integer

>>> bg.integer_validator("name", "A!ex")
Traceback (most recent call last):
	  ...
TypeError: name must be an integer

Case catched output with string value

>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
	...
TypeError: name must be an integer

Case catched output with 0 as value

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
	...
ValueError: age must be greater than 0

Case with negative value

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
	...
ValueError: distance must be greater than 0

Case with float value

>>> bg.integer_validator("distance", 4.5)
Traceback (most recent call last):
	...
TypeError: distance must be an integer

Case with calling area function

>>> bg.integer_validator("my_int", 12)
>>> bg.area()
Traceback (most recent call last):
	  ...
Exception: area() is not implemented

Case with None as value

>>> bg.integer_validator("age", None)
Traceback (most recent call last):
	  ...
TypeError: age must be an integer

Case without any arguments

>>> bg.integer_validator()
Traceback (most recent call last):
	  ...
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

Case without value

>>> bg.integer_validator("year")
Traceback (most recent call last):
	  ...
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

Case with an array as value

>>> bg.integer_validator("day", [7, 3, 5])
Traceback (most recent call last):
	  ...
TypeError: day must be an integer

Case with a tuple

>>> bg.integer_validator("day", (7, 3, 5))
Traceback (most recent call last):
	  ...
TypeError: day must be an integer

Case with a dictionary

>>> bg.integer_validator("month", {"Jan", "Feb", "Mar"})
Traceback (most recent call last):
	  ...
TypeError: month must be an integer
